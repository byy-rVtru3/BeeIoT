version: "3"

services:
  db:
    image: postgres:latest
    restart: always
    shm_size: 128m
    container_name: db_container
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - db_data:/var/lib/postgresql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "127.0.0.1:5432:5432"
    networks:
      - app-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 3

  adminer: # классная штука для работы с БД (кажется)
    image: adminer
    restart: always
    networks:
      - app-net
    ports:
      - "127.0.0.1:8080:8080"

  redis:
    image: redis:7-alpine
    restart: always
    container_name: redis_container
    command: redis-server --requirepass ${REDIS_PASSWORD}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - "127.0.0.1:6379:6379"
    networks:
      - app-net
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  go-server:
    build:
      context: ..
      dockerfile: build/Dockerfile
    container_name: go_server_container
    environment:
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      PGHOST: ${DB_HOST}
      PGPORT: ${DB_PORT}
      PGUSER: ${DB_USER}
      PGPASSWORD: ${DB_PASSWORD}
      PGDATABASE: ${DB_NAME}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      JWT_SECRET: ${JWT_SECRET}
      REDIS_ADDR: ${REDIS_ADDR}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_DB: ${REDIS_DB}
    depends_on:
      - db
      - redis
    ports:
      - "127.0.0.1:8000:8000"
    networks:
      - app-net
    restart: unless-stopped

volumes:
  db_data:

networks:
  app-net:
    driver: bridge
